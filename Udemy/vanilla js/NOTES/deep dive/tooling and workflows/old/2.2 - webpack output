webpack will take some files and bundled it into less files 
with 1 main entry file and the other as the support file if you have some dynamic importing 
in your code

you need to direct the output of this bundling with the output property (it's an object)

one of the most important property in the output object is the publicPath property,
it's used to map the path into the extra/supporting file that generated if you use dynamic importing
why would we need to use this?
because as default the nodeJs will look for these extra files in the root folder and not in the same folder
as the entry point file

example:
module.exports = {
    // entry file
    mode: 'development', // the default value of this mode property is 'production'
                         // if it is in the production mode, webpack will 
                         // implement some optimization for the bundle 
    entry: './events-01-starting-setup/src/app.js',
    output: { // this is the place were the bundled file will be stored
        filename: 'app.js',
        path: path.resolve(__dirname, 'events-01-starting-setup', 'assets', 'scripts'), // same as ./assets/scripts/
        publicPath: 'events-01-starting-setup/assets/scripts/'
        
        // publicPath is being used as a map to tell the webpack
        // where the extra files needed to be load
    }
};