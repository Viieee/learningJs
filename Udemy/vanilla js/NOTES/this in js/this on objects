// To set the value of this to a particular value when calling 
// a function, use call(), or apply()

// An object can be passed as the first argument to call or apply and this will be bound to it.
var obj = {a: 'Custom'};

// We declare a variable and the variable is assigned to the global window as its property.
var a = 'ini Global';

function whatsThis() {
  // a = 'dalam fungsi', redefining the variable will override the value from global 
  return this.a;  // The value of this is dependent on how the function is called
}

console.log(whatsThis()); // 'ini Global' as this in the function isn't set, so it defaults to the global/window object
console.log(whatsThis.call(obj));  // 'Custom' as this in the function is set to obj
console.log(whatsThis.apply(obj)); // 'Custom' as this in the function is set to obj


function add(c, d) {
    return this.a + this.b + c + d;
  }
  
var o = {a: 1, b: 3};
  
// The first parameter is the object to use as
// 'this', subsequent parameters are passed as
// arguments in the function call
console.log(add.call(o, 5, 7)); // 16

// The first parameter is the object to use as
// 'this', the second is an array whose
// members are used as the arguments in the function call
console.log(add.apply(o, [10, 20])); // 34


// If the method is on an object's prototype chain, 
// this refers to the object the method was called on, 
// as if the method were on the object.

var o = {f: function() { return this.a + this.b; }};
var p = Object.create(o); // recreating p object based on object o, 'this' refers to p
p.a = 1;
p.b = 4;

console.log(p.f()); // 5



