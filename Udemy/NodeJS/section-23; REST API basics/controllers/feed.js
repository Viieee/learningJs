const fs = require("fs");
const path = require("path");

const expressValidator = require("express-validator");
const PostModel = require("../models/post");
const UserModel = require("../models/user");

// exports.getPosts = (req, res, next) => {
//   const currentPage = parseInt(req.query.page) || 1;
//   const perPage = 2;
//   let totalItems;
//   PostModel.find()
//     .countDocuments()
//     .then((count) => {
//       totalItems = count;
//       return PostModel.find()
//         .skip((currentPage - 1) * perPage)
//         .limit(perPage);
//     })
//     .then((posts) => {
//       res.status(200).json({
//         message: "post fetched successfully!",
//         posts: posts,
//         totalItems: totalItems,
//       });
//     })
//     .catch((err) => {
//       if (!err.statusCode) {
//         err.statusCode = 500;
//       }
//       next(err); // ! in async code you need to do this to reach the error handling middleware
//     });
// };

// using async await
exports.getPosts = async (req, res, next) => {
  const currentPage = parseInt(req.query.page) || 1;
  const perPage = 2;
  try {
    let totalItems = await PostModel.find().countDocuments();
    const posts = await PostModel.find().populate('creator')
      .skip((currentPage - 1) * perPage)
      .limit(perPage);

    res.status(200).json({
      message: "post fetched successfully!",
      posts: posts,
      totalItems: totalItems,
    });
  } catch (error) {
    if (!error.statusCode) {
      error.statusCode = 500;
    }
    next(err);
  }
};

exports.postPost = (req, res, next) => {
  const errors = expressValidator.validationResult(req);
  if (!errors.isEmpty()) {
    const error = new Error("Validation failed, entered data is incorrect.");
    error.statusCode = 422;
    throw error; // ! will automatically exit the function and reach error handling middleware
    // return res.status(422).json({
    //   message: 'Validation failed, entered data is incorrect.',
    //   errors: errors.array(),
    // });
  }
  if (!req.file) {
    // if theres no file attached in the request
    const error = new Error("No image provided.");
    error.statusCode = 422;
    throw error;
  }
  const imageUrl = req.file.path.replace("\\", "/"); // path generated by multer
  const title = req.body.title;
  const content = req.body.content;
  const userId = req.userId; // ! in isAuth.js middleware file, we save the id of the user on the request
  let creator;
  const post = new PostModel({
    title: title,
    content: content,
    imageUrl: imageUrl,
    creator: userId,
  });
  post
    .save()
    .then((result) => {
      // adding the post to the list of post of the current logged in user
      return UserModel.findById(req.userId);
    })
    .then((user) => {
      creator = user;
      user.posts.push(post); // pushing the post into posts array in user collection
      return user.save();
    })
    .then((result) => {
      // crate post in db
      res.status(201).json({
        message: "post created successfully",
        post: post,
        creator: { _id: creator._id, name: creator.name },
      });
    })
    .catch((err) => {
      if (!err.statusCode) {
        err.statusCode = 500;
      }
      next(err); // ! in async code you need to do this to reach the error handling middleware
    });
};

exports.getAPost = (req, res, next) => {
  const postId = req.params.postId; // ! from link
  PostModel.findById(postId)
    .then((post) => {
      if (!post) {
        const error = new Error("could not find post!");
        error.statusCode = 404;
        throw error; // ! if you do this in async code it will reach catch method
      }
      res.status(200).json({
        message: "Post fetched.",
        post: post,
      });
    })
    .catch((err) => {
      if (!err.statusCode) {
        err.statusCode = 500;
      }
      next(err); // ! in async code you need to do this to reach the error handling middleware
    });
};

exports.editPost = (req, res, next) => {
  const postId = req.params.postId;

  const errors = expressValidator.validationResult(req);
  if (!errors.isEmpty()) {
    const error = new Error("Validation failed, entered data is incorrect.");
    error.statusCode = 422;
    throw error; // ! will automatically exit the function and reach error handling middleware
    // return res.status(422).json({
    //   message: 'Validation failed, entered data is incorrect.',
    //   errors: errors.array(),
    // });
  }

  const title = req.body.title;
  const content = req.body.content;

  let imageUrl = req.body.image;

  if (req.file) {
    // if a new file is picked
    imageUrl = req.file.path.replace("\\", "/");
  }
  if (!imageUrl) {
    const error = new Error("no file picked.");
    error.statusCode(422);
    throw error;
  }
  PostModel.findById(postId)
    .then((post) => {
      if (!post) {
        const error = new Error("the post doesn't exist!");
        error.statusCode = 404;
        throw error;
      }

      if (post.creator.toString() !== req.userId) {
        const error = new Error("not authorized.");
        error.statusCode = 403;
        throw error;
      }
      if (imageUrl !== post.imageUrl) {
        // if theres a new file picked (new name), delete old file
        clearImage(post.imageUrl);
      }
      post.title = title;
      post.imageUrl = imageUrl;
      post.content = content;
      return post.save();
    })
    .then((result) => {
      res
        .status(200)
        .json({ message: "post updated successfully!", post: result });
    })
    .catch((err) => {
      if (!err.statusCode) {
        err.statusCode = 500;
      }
      next(err);
    });
};

exports.deletePost = (req, res, next) => {
  const postId = req.params.postId;
  PostModel.findById(postId)
    .then((post) => {
      // check logged in user (later)
      if (!post) {
        const error = new Error("the post doesn't exist!");
        error.statusCode = 404;
        throw error;
      }
      if (post.creator.toString() !== req.userId) {
        const error = new Error("not authorized.");
        error.statusCode = 403;
        throw error;
      }
      clearImage(post.imageUrl);
      return PostModel.findByIdAndRemove(postId);
    })
    .then((result) => {
      return UserModel.findById(req.userId);
    })
    .then((user) => {
      // clearing the user's relation from the post
      user.posts.pull(postId);
      return user.save(); // saving the changes
    })
    .then((result) => {
      console.log(result);
      res.status(200).json({ message: "deleted post." });
    })
    .catch((err) => {
      if (!err.statuscode) {
        err.statusCode = 500;
      }
      next(err);
    });
};

const clearImage = (pathOfFile) => {
  filePath = path.join(__dirname, "..", pathOfFile); // this is from controller folder (where this file is located)
  fs.unlink(filePath, (err) => {
    console.log(err);
  });
};
